#include <esp_now.h>
#include <WiFi.h>

//----------------------------------------Load libraries
//----------------------------------------

uint8_t broadcastAddress[] = {0xC0, 0x49, 0xEF, 0xCC, 0xB9, 0x88}; // Replace with the MAC Address of the receiver ESP32

//----------------------------------------Pin definitions
const int inputPin = 2; // Replace with the input pin you're using

//----------------------------------------Structure example to send data
// Must match the receiver structure
typedef struct struct_message {
  int command;
} struct_message;

struct_message send_Data; // Create a struct_message to send data.
//----------------------------------------

String success; // Variable to store if sending data was successful.

//++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ Callback when data is sent
void OnDataSent(const uint8_t *mac_addr, esp_now_send_status_t status) {
  Serial.print("\r\nLast Packet Send Status:\t");
  Serial.println(status == ESP_NOW_SEND_SUCCESS ? "Delivery Success" : "Delivery Fail");
  if (status == ESP_NOW_SEND_SUCCESS) {
    success = "Delivery Success :)";
  } else {
    success = "Delivery Fail :(";
  }
  Serial.println(">>>>>");
}
//++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

//++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ VOID SETUP
void setup() {
  Serial.begin(115200);

  WiFi.mode(WIFI_STA); // Set device as a Wi-Fi Station.

  //----------------------------------------Init ESP-NOW
  if (esp_now_init() != ESP_OK) {
    Serial.println("Error initializing ESP-NOW");
    return;
  }
  //----------------------------------------

  //----------------------------------------Once ESPNow is successfully Init, we will register for Send CB to
  // get the status of Transmitted packet
  esp_now_register_send_cb(OnDataSent);
  //----------------------------------------

  //----------------------------------------Register peer
  esp_now_peer_info_t peerInfo;
  memcpy(peerInfo.peer_addr, broadcastAddress, 6);
  peerInfo.channel = 0;
  peerInfo.encrypt = false;
  //----------------------------------------

  //----------------------------------------Add peer
  if (esp_now_add_peer(&peerInfo) != ESP_OK) {
    Serial.println("Failed to add peer");
    return;
  }
  //----------------------------------------

  pinMode(inputPin, INPUT_PULLUP);
}
//++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

//++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ VOID LOOP
void loop() {
  //----------------------------------------Check input pin state
  bool inputState = digitalRead(inputPin);
  //----------------------------------------

  Serial.println();
  Serial.print(">>>>> ");
  Serial.println("Send data");

  //----------------------------------------Set command based on input state
  if (inputState) {
    send_Data.command = 1; // Command to set output pin HIGH
  } else {
    send_Data.command = 0; // Command to set output pin LOW
  }
  //----------------------------------------

  //----------------------------------------Send message via ESP-NOW
  esp_err_t result = esp_now_send(broadcastAddress, (uint8_t *)&send_Data, sizeof(send_Data));

  if (result == ESP_OK) {
    Serial.println("Sent with success");
  } else {
    Serial.println("Error sending the data");
  }
  //----------------------------------------

  delay(500); // Add a small delay for stability
}
//++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
