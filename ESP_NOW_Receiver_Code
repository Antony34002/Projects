#include <esp_now.h>
#include <WiFi.h>

//----------------------------------------Load libraries
//----------------------------------------

uint8_t broadcastAddress[] = {0x24, 0xD7, 0xEB, 0x0F, 0x97, 0x58}; // Replace with the MAC Address of the sender ESP32

//----------------------------------------Pin definitions
const int outputPin = 27; // Replace with the output pin you're using

//----------------------------------------Structure example to receive data
// Must match the sender structure
typedef struct struct_message {
  int command;
} struct_message;

struct_message received_Data; // Create a struct_message to receive data.
//----------------------------------------

//++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ Callback when data is received
void OnDataRecv(const uint8_t *mac_addr, const uint8_t *data, int data_len) {
  memcpy(&received_Data, data, sizeof(received_Data));

  Serial.println();
  Serial.print("Received command: ");
  Serial.println(received_Data.command);

  //----------------------------------------Control output pin based on received command
  if (received_Data.command == 1) {
    digitalWrite(outputPin, HIGH); // Set output pin HIGH
  } else {
    digitalWrite(outputPin, LOW); // Set output pin LOW
  }
  //----------------------------------------
}
//++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

//++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ VOID SETUP
void setup() {
  Serial.begin(115200);

  WiFi.mode(WIFI_STA); // Set device as a Wi-Fi Station.

  //----------------------------------------Init ESP-NOW
  if (esp_now_init() != ESP_OK) {
    Serial.println("Error initializing ESP-NOW");
    return;
  }
  //----------------------------------------

  //----------------------------------------Once ESPNow is successfully Init, we will register for Receive CB to
  // get the data when it is sent from the sender
  esp_now_register_recv_cb(OnDataRecv);
  //----------------------------------------

  //----------------------------------------Register peer
  esp_now_peer_info_t peerInfo;
  memcpy(peerInfo.peer_addr, broadcastAddress, 6);
  peerInfo.channel = 0;
  peerInfo.encrypt = false;
  //----------------------------------------

  //----------------------------------------Add peer
  if (esp_now_add_peer(&peerInfo) != ESP_OK) {
    Serial.println("Failed to add peer");
    return;
  }
  //----------------------------------------

  pinMode(outputPin, OUTPUT);
}
//++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

//++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ VOID LOOP
void loop() {
  // Do nothing in the loop
}
//++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
